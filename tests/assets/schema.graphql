scalar JSON

type MetaData {
  siteName: String
  siteDescription: String
  siteUrl: String
  pathPrefix: String
}

interface Node {
  id: ID!
}

type Page {
  path: String
  context: JSON
}

# Filter PageFilter nodes by path
input PageFilterPathFilter {
  # Filter nodes which have a string property of specified length.
  len: Int
  # Filter nodes by property of (strict) equality.
  eq: String
  # Filter nodes by property not equal to provided value.
  ne: String
  # Filter nodes by property matching provided regular expression.
  regex: String
  # Filter nodes by property matching any of the provided values.
  in: [String]
  # Filter nodes by property not matching any of the provided values.
  nin: [String]
}

input PageFilters {
  path: PageFilterPathFilter
}

type PageInfo {
  perPage: Int!
  currentPage: Int!
  totalPages: Int!
  totalItems: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  isFirst: Boolean!
  isLast: Boolean!
}

type Post implements Node {
  path: String
  fileInfo: PostFileInfo
  content: String
  excerpt: String
  slug: String
  title: String
  headings(
    depth: RemarkHeadingLevels
    stripTags: Boolean = true
  ): [RemarkHeading]
  timeToRead(
    # Words per minute
    speed: Int = 230
  ): Int
  fields: PostFields @deprecated(reason: "Get field on node instead.")
  id: ID!
  belongsTo(
    sortBy: String = "date"
    order: SortOrderEnum = DESC
    # Defaults to 25 when page is provided.
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument]
    # Filter for Post nodes.
    filter: PostBelongsToFilters
  ): PostBelongsTo
  _id: ID! @deprecated(reason: "Use id instead.")
}

type PostBelongsTo {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [PostBelongsToEdge]
}

type PostBelongsToEdge {
  node: PostBelongsToUnion
  next: PostBelongsToUnion
  previous: PostBelongsToUnion
}

# Filter PostBelongsToFilter nodes by id
input PostBelongsToFilterIdFilter {
  # Filter nodes which have a string property of specified length.
  len: Int
  # Filter nodes by property of (strict) equality.
  eq: String
  # Filter nodes by property not equal to provided value.
  ne: String
  # Filter nodes by property matching provided regular expression.
  regex: String
  # Filter nodes by property matching any of the provided values.
  in: [String]
  # Filter nodes by property not matching any of the provided values.
  nin: [String]
}

# Filter PostBelongsToFilter nodes by path
input PostBelongsToFilterPathFilter {
  # Filter nodes which have a string property of specified length.
  len: Int
  # Filter nodes by property of (strict) equality.
  eq: String
  # Filter nodes by property not equal to provided value.
  ne: String
  # Filter nodes by property matching provided regular expression.
  regex: String
  # Filter nodes by property matching any of the provided values.
  in: [String]
  # Filter nodes by property not matching any of the provided values.
  nin: [String]
}

input PostBelongsToFilters {
  id: PostBelongsToFilterIdFilter
  path: PostBelongsToFilterPathFilter
  typeName: PostBelongsToFilterTypeName
}

# Filter nodes by typeName.
input PostBelongsToFilterTypeName {
  eq: PostBelongsToTypeNameEnum
  ne: PostBelongsToTypeNameEnum
  regex: String
  in: [PostBelongsToTypeNameEnum]
  nin: [PostBelongsToTypeNameEnum]
}

enum PostBelongsToTypeNameEnum {
  Post
}

union PostBelongsToUnion = Post
type PostConnection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [PostEdge]
}

type PostEdge {
  node: Post
  next: Post
  previous: Post
}

type PostFields {
  path: String
  fileInfo: PostFileInfo
  content: String
  excerpt: String
  slug: String
  title: String
}

type PostFileInfo {
  extension: String
  directory: String
  path: String
  name: String
}

# Filter PostFilter nodes by content
input PostFilterContentFilter {
  # Filter nodes which have a string property of specified length.
  len: Int
  # Filter nodes by property of (strict) equality.
  eq: String
  # Filter nodes by property not equal to provided value.
  ne: String
  # Filter nodes by property matching provided regular expression.
  regex: String
  # Filter nodes by property matching any of the provided values.
  in: [String]
  # Filter nodes by property not matching any of the provided values.
  nin: [String]
}

# Filter PostFilter nodes by excerpt
input PostFilterExcerptFilter {
  # Filter nodes which have a string property of specified length.
  len: Int
  # Filter nodes by property of (strict) equality.
  eq: String
  # Filter nodes by property not equal to provided value.
  ne: String
  # Filter nodes by property matching provided regular expression.
  regex: String
  # Filter nodes by property matching any of the provided values.
  in: [String]
  # Filter nodes by property not matching any of the provided values.
  nin: [String]
}

# Filter PostFilter nodes by fileInfo directory
input PostFilterFileInfoDirectoryFilter {
  # Filter nodes which have a string property of specified length.
  len: Int
  # Filter nodes by property of (strict) equality.
  eq: String
  # Filter nodes by property not equal to provided value.
  ne: String
  # Filter nodes by property matching provided regular expression.
  regex: String
  # Filter nodes by property matching any of the provided values.
  in: [String]
  # Filter nodes by property not matching any of the provided values.
  nin: [String]
}

# Filter PostFilter nodes by fileInfo extension
input PostFilterFileInfoExtensionFilter {
  # Filter nodes which have a string property of specified length.
  len: Int
  # Filter nodes by property of (strict) equality.
  eq: String
  # Filter nodes by property not equal to provided value.
  ne: String
  # Filter nodes by property matching provided regular expression.
  regex: String
  # Filter nodes by property matching any of the provided values.
  in: [String]
  # Filter nodes by property not matching any of the provided values.
  nin: [String]
}

input PostFilterFileInfoFilter__Object {
  extension: PostFilterFileInfoExtensionFilter
  directory: PostFilterFileInfoDirectoryFilter
  path: PostFilterFileInfoPathFilter
  name: PostFilterFileInfoNameFilter
}

# Filter PostFilter nodes by fileInfo name
input PostFilterFileInfoNameFilter {
  # Filter nodes which have a string property of specified length.
  len: Int
  # Filter nodes by property of (strict) equality.
  eq: String
  # Filter nodes by property not equal to provided value.
  ne: String
  # Filter nodes by property matching provided regular expression.
  regex: String
  # Filter nodes by property matching any of the provided values.
  in: [String]
  # Filter nodes by property not matching any of the provided values.
  nin: [String]
}

# Filter PostFilter nodes by fileInfo path
input PostFilterFileInfoPathFilter {
  # Filter nodes which have a string property of specified length.
  len: Int
  # Filter nodes by property of (strict) equality.
  eq: String
  # Filter nodes by property not equal to provided value.
  ne: String
  # Filter nodes by property matching provided regular expression.
  regex: String
  # Filter nodes by property matching any of the provided values.
  in: [String]
  # Filter nodes by property not matching any of the provided values.
  nin: [String]
}

# Filter PostFilter nodes by id
input PostFilterIdFilter {
  # Filter nodes which have a string property of specified length.
  len: Int
  # Filter nodes by property of (strict) equality.
  eq: String
  # Filter nodes by property not equal to provided value.
  ne: String
  # Filter nodes by property matching provided regular expression.
  regex: String
  # Filter nodes by property matching any of the provided values.
  in: [String]
  # Filter nodes by property not matching any of the provided values.
  nin: [String]
}

# Filter PostFilter nodes by path
input PostFilterPathFilter {
  # Filter nodes which have a string property of specified length.
  len: Int
  # Filter nodes by property of (strict) equality.
  eq: String
  # Filter nodes by property not equal to provided value.
  ne: String
  # Filter nodes by property matching provided regular expression.
  regex: String
  # Filter nodes by property matching any of the provided values.
  in: [String]
  # Filter nodes by property not matching any of the provided values.
  nin: [String]
}

input PostFilters {
  path: PostFilterPathFilter
  fileInfo: PostFilterFileInfoFilter__Object
  content: PostFilterContentFilter
  excerpt: PostFilterExcerptFilter
  slug: PostFilterSlugFilter
  title: PostFilterTitleFilter
  id: PostFilterIdFilter
}

# Filter PostFilter nodes by slug
input PostFilterSlugFilter {
  # Filter nodes which have a string property of specified length.
  len: Int
  # Filter nodes by property of (strict) equality.
  eq: String
  # Filter nodes by property not equal to provided value.
  ne: String
  # Filter nodes by property matching provided regular expression.
  regex: String
  # Filter nodes by property matching any of the provided values.
  in: [String]
  # Filter nodes by property not matching any of the provided values.
  nin: [String]
}

# Filter PostFilter nodes by title
input PostFilterTitleFilter {
  # Filter nodes which have a string property of specified length.
  len: Int
  # Filter nodes by property of (strict) equality.
  eq: String
  # Filter nodes by property not equal to provided value.
  ne: String
  # Filter nodes by property matching provided regular expression.
  regex: String
  # Filter nodes by property matching any of the provided values.
  in: [String]
  # Filter nodes by property not matching any of the provided values.
  nin: [String]
}

type Query {
  page(path: String!): Page
  post(
    id: String
    _id: String
    path: String
    # Will return an error if not nullable.
    nullable: Boolean = false
  ): Post
  allPage(
    # Filter for pages.
    filter: PageFilters
  ): [Page]
  # Connection to all Post nodes
  allPost(
    sortBy: String = "date"
    order: SortOrderEnum = DESC
    # Defaults to 25 when page is provided.
    perPage: Int
    skip: Int = 0
    limit: Int
    page: Int
    sort: [SortArgument]
    regex: String
    # Filter for Post nodes.
    filter: PostFilters
  ): PostConnection
  metaData: MetaData
}

type RemarkHeading {
  depth: Int
  value: String
  anchor: String
}

enum RemarkHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

input SortArgument {
  by: String! = "date"
  order: SortOrderEnum = DESC
}

enum SortOrderEnum {
  # Sort ascending
  ASC
  # Sort descending
  DESC
}
